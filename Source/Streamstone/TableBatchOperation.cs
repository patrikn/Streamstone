using System.Collections;
using System.Collections.Generic;

namespace Streamstone
{
    public class TableBatchOperation : ICollection<TableOperation>, IEnumerable<TableOperation>, IList<TableOperation>
    {
        List<TableOperation> operations = new List<TableOperation>();

        // Autogenerated by Resharper
        public void Add(TableOperation item)
        {
            operations.Add(item);
        }

        public void Clear()
        {
            operations.Clear();
        }

        public bool Contains(TableOperation item)
        {
            return operations.Contains(item);
        }

        public void CopyTo(TableOperation[] array, int arrayIndex)
        {
            operations.CopyTo(array, arrayIndex);
        }

        public bool Remove(TableOperation item)
        {
            return operations.Remove(item);
        }

        public int Count => operations.Count;

        public bool IsReadOnly => ((ICollection<TableOperation>) operations).IsReadOnly;

        public int IndexOf(TableOperation item)
        {
            return operations.IndexOf(item);
        }

        public void Insert(int index, TableOperation item)
        {
            operations.Insert(index, item);
        }

        public void RemoveAt(int index)
        {
            operations.RemoveAt(index);
        }

        public TableOperation this[int index]
        {
            get => operations[index];
            set => operations[index] = value;
        }

        public IEnumerator<TableOperation> GetEnumerator()
        {
            return operations.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return ((IEnumerable) operations).GetEnumerator();
        }
    }
}